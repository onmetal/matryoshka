
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.4.1
  creationTimestamp: null
  name: apiservers.matryoshka.onmetal.de
spec:
  group: matryoshka.onmetal.de
  names:
    kind: APIServer
    listKind: APIServerList
    plural: apiservers
    singular: apiserver
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: number of ready replicas
      jsonPath: .status.readyReplicas
      name: Ready
      type: string
    - description: number of updated replicas
      jsonPath: .status.updatedReplicas
      name: Up-To-Date
      type: number
    - description: number of available replicas
      jsonPath: .status.availableReplicas
      name: Available
      type: number
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: APIServer is the Schema for the apiservers API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: APIServerSpec defines the desired state of APIServer
            properties:
              authentication:
                description: Authentication specifies how users can authenticate to
                  the api server.
                properties:
                  anonymous:
                    description: Anonymous specifies whether anonymous authentication
                      is enabled.
                    type: object
                  bootstrapToken:
                    description: BootstrapToken specifies whether bootstrap token
                      authentication is enabled.
                    type: object
                  token:
                    description: Token specifies whether token authentication is enabled
                      and where these tokens are located at.
                    properties:
                      secret:
                        description: Secret specifies a secret containing the tokens.
                          If key is left blank, DefaultAPIServerTokenAuthenticationKey
                          is used as default key.
                        properties:
                          key:
                            type: string
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                              TODO: Add other useful fields. apiVersion, kind, uid?'
                            type: string
                        type: object
                    required:
                    - secret
                    type: object
                type: object
              etcd:
                description: ETCD specifies etcd configuration for the api server
                  to use.
                properties:
                  certificateAuthority:
                    description: CertificateAuthority is an optional specification
                      of the certificate authority to use when connecting to the etcd.
                    properties:
                      secret:
                        description: Secret is a SecretSelector specifying where to
                          retrieve the ca certificate. If key is left blank, DefaultAPIServerETCDCertificateAuthorityKey
                          is used.
                        properties:
                          key:
                            type: string
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                              TODO: Add other useful fields. apiVersion, kind, uid?'
                            type: string
                        type: object
                    required:
                    - secret
                    type: object
                  key:
                    description: Key is an optional specification of the key to use
                      when connecting to the etcd.
                    properties:
                      secret:
                        description: Secret references a secret containing the etcd
                          key under 'tls.key'.
                        properties:
                          name:
                            description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                              TODO: Add other useful fields. apiVersion, kind, uid?'
                            type: string
                        type: object
                    required:
                    - secret
                    type: object
                  servers:
                    description: Servers is the list of etcd servers for the api server
                      to connect to.
                    items:
                      type: string
                    minItems: 1
                    type: array
                required:
                - servers
                type: object
              replicas:
                description: Replicas specifies the desired amount of replicas for
                  the api server deployment.
                format: int32
                minimum: 0
                type: integer
              resources:
                description: Resources specifies the resources the api server container
                  requires.
                properties:
                  limits:
                    additionalProperties:
                      anyOf:
                      - type: integer
                      - type: string
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                      x-kubernetes-int-or-string: true
                    description: 'Limits describes the maximum amount of compute resources
                      allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                    type: object
                  requests:
                    additionalProperties:
                      anyOf:
                      - type: integer
                      - type: string
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                      x-kubernetes-int-or-string: true
                    description: 'Requests describes the minimum amount of compute
                      resources required. If Requests is omitted for a container,
                      it defaults to Limits if that is explicitly specified, otherwise
                      to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                    type: object
                type: object
              serviceAccount:
                description: ServiceAccount are service account settings for the api
                  server.
                properties:
                  issuer:
                    description: Issuer is the service account issuer.
                    type: string
                  secret:
                    description: Secret references a secret containing a key 'tls.key'
                      that contains the key to sign and verify service accounts with.
                    properties:
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                          TODO: Add other useful fields. apiVersion, kind, uid?'
                        type: string
                    type: object
                required:
                - issuer
                - secret
                type: object
              tls:
                description: TLS optionally defines how to secure the api server.
                properties:
                  secret:
                    description: Secret references a secret containing 'tls.crt' and
                      'tls.key' to use for TLS-securing the API server.
                    properties:
                      name:
                        description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                          TODO: Add other useful fields. apiVersion, kind, uid?'
                        type: string
                    type: object
                required:
                - secret
                type: object
              version:
                description: Version is the api server version to use.
                pattern: ^[0-9]+\.[0-9]+\.[0-9]+$
                type: string
            required:
            - authentication
            - etcd
            - replicas
            - serviceAccount
            - version
            type: object
          status:
            description: APIServerStatus defines the observed state of APIServer
            properties:
              availableReplicas:
                format: int32
                type: integer
              conditions:
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    type FooStatus struct{     // Represents the observations of a
                    foo's current state.     // Known .status.conditions.type are:
                    \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type
                    \    // +patchStrategy=merge     // +listType=map     // +listMapKey=type
                    \    Conditions []metav1.Condition `json:\"conditions,omitempty\"
                    patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`
                    \n     // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              observedGeneration:
                format: int64
                type: integer
              readyReplicas:
                format: int32
                type: integer
              replicas:
                format: int32
                type: integer
              unavailableReplicas:
                format: int32
                type: integer
              updatedReplicas:
                format: int32
                type: integer
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
